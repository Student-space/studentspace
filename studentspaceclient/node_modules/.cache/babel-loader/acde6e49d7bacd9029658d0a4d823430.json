{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('http://localhost:5000/users/');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nexport const userRegister = ({\n  firstName,\n  lastName,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    firstName,\n    lastName,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/users/signup', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert(`please login with your new credentials`, `success`));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, `fail`)));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //user login\n\nexport const userLogin = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    const res = await axios.post('http://localhost:5000/users/signin', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, `fail`)));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //user logout\n\nexport const userLogout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["F:/Projects/StudentSpaceVersion2/studentspace/studentspaceclient/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","userRegister","firstName","lastName","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","msg","userLogin","userLogout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {setAlert} from './alert';\r\nimport{\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT\r\n\r\n    \r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken'\r\n\r\n\r\n\r\n//load user\r\nexport const loadUser=()=>async dispatch=>{\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n\r\n    }\r\n    \r\n    try {\r\n        const res=await axios.get('http://localhost:5000/users/')\r\n        \r\n        dispatch({\r\n            type:USER_LOADED,\r\n            payload:res.data\r\n        });\r\n    \r\n    } catch (error) {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n//register user\r\nexport const userRegister=({firstName,lastName,email,password})=>async dispatch=>{\r\n   \r\n    const config={\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body=JSON.stringify({firstName,lastName,email,password}); \r\n\r\n    try {\r\n        const res= await axios.post('http://localhost:5000/users/signup',body,config)\r\n        dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload:res.data\r\n        });\r\n       dispatch(setAlert(`please login with your new credentials`,`success`));\r\n    } catch (err) {\r\n         const errors=err.response.data.errors;\r\n        if(errors)\r\n        {\r\n            errors.forEach(error=>dispatch(setAlert(error.msg,`fail`)))\r\n        }\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });   \r\n    }\r\n}\r\n\r\n\r\n//user login\r\nexport const userLogin=(email,password)=>async dispatch=>{\r\n    const config={\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body={email,password}; \r\n\r\n    try {\r\n        const res= await axios.post('http://localhost:5000/users/signin',body,config)\r\n        dispatch({\r\n            type:LOGIN_SUCCESS,\r\n            payload:res.data\r\n        });\r\n        dispatch(loadUser());\r\n    } catch (err) {\r\n        const errors=err.response.data.errors;\r\n        if(errors)\r\n        {\r\n            errors.forEach(error=>dispatch(setAlert(error.msg,`fail`)))\r\n        }\r\n        dispatch({\r\n            type:LOGIN_FAIL\r\n        });   \r\n    }\r\n}\r\n\r\n\r\n//user logout\r\nexport const userLogout=()=>dispatch=>{\r\n    dispatch({type:LOGOUT})\r\n}"]},"metadata":{},"sourceType":"module"}