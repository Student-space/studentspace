{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //load user\n// export const loadUser=()=>async dispatch=>{\n//     if(localStorage.token){\n//         setAuthToken(localStorage.token);\n//     }\n//     try {\n//         const res=await axios.get('./users/check')\n//         dispatch({\n//             type:USER_LOADED,\n//             payload:res.data\n//         });\n//     } catch (error) {\n//         dispatch({\n//             type:AUTH_ERROR\n//         });\n//     }\n// }\n//register user\n\nexport const userRegister = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/users/signin', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //user login\n\nexport const userLogin = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/users/signin', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n  } catch (error) {\n    // const errors=error.response.data.errors;\n    // if(errors)\n    // {\n    //     errors.forEach(err=>dispatch(setAlert(err.msg,'danger')));\n    // }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/amol/Minr Project/studentspace/studentspaceclient/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAuthToken","userRegister","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","error","errors","response","forEach","err","msg","userLogin"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,SAAvB;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,WAHJ,EAIIC,UAJJ,EAKIC,aALJ,EAMIC,UANJ,QAQO,SARP;AASA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;AACA,OAAO,MAAMC,YAAY,GAAC,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,KAAN;AAAYC,EAAAA;AAAZ,CAAD,KAAyB,MAAMC,QAAN,IAAgB;AAC/D,QAAMC,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AADC,GAAb;AAKA,QAAMC,IAAI,GAACC,IAAI,CAACC,SAAL,CAAe;AAACR,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,GAAf,CAAX;;AAEA,MAAI;AACA,UAAMO,GAAG,GAAE,MAAMnB,KAAK,CAACoB,IAAN,CAAW,oCAAX,EAAgDJ,IAAhD,EAAqDF,MAArD,CAAjB;AACAD,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAACnB,gBADA;AAELoB,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR,CAFA,CAMA;AACH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMC,MAAM,GAACD,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBE,MAAjC;;AACA,QAAGA,MAAH,EACA;AACIA,MAAAA,MAAM,CAACE,OAAP,CAAeC,GAAG,IAAEf,QAAQ,CAACZ,QAAQ,CAAC2B,GAAG,CAACC,GAAL,EAAS,QAAT,CAAT,CAA5B;AACH;;AACDhB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAClB;AADA,KAAD,CAAR;AAGH;AACJ,CAzBM,C,CA4BP;;AACA,OAAO,MAAM2B,SAAS,GAAC,CAACnB,KAAD,EAAOC,QAAP,KAAkB,MAAMC,QAAN,IAAgB;AACrD,QAAMC,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AADC,GAAb;AAKA,QAAMC,IAAI,GAACC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAf,CAAX;;AAEA,MAAI;AACA,UAAMO,GAAG,GAAE,MAAMnB,KAAK,CAACoB,IAAN,CAAW,eAAX,EAA2BJ,IAA3B,EAAgCF,MAAhC,CAAjB;AACAD,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAACf,aADA;AAELgB,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR,CAFA,CAMA;AACH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ;AACA;AACA;AACA;AACA;AACAX,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAACd;AADA,KAAD,CAAR;AAGH;AACJ,CAzBM","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\nimport{\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n    \n} from './types';\nimport setAuthToken from '../utils/setAuthToken'\n\n//load user\n// export const loadUser=()=>async dispatch=>{\n//     if(localStorage.token){\n//         setAuthToken(localStorage.token);\n\n//     }\n    \n//     try {\n//         const res=await axios.get('./users/check')\n    \n//         dispatch({\n//             type:USER_LOADED,\n//             payload:res.data\n//         });\n    \n//     } catch (error) {\n//         dispatch({\n//             type:AUTH_ERROR\n//         });\n//     }\n// }\n\n\n\n//register user\nexport const userRegister=({name,email,password})=>async dispatch=>{\n    const config={\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n    const body=JSON.stringify({name,email,password}); \n\n    try {\n        const res= await axios.post('http://localhost:5000/users/signin',body,config)\n        dispatch({\n            type:REGISTER_SUCCESS,\n            payload:res.data\n        });\n        // dispatch(loadUser());\n    } catch (error) {\n        const errors=error.response.data.errors;\n        if(errors)\n        {\n            errors.forEach(err=>dispatch(setAlert(err.msg,'danger')));\n        }\n        dispatch({\n            type:REGISTER_FAIL\n        });   \n    }\n}\n\n\n//user login\nexport const userLogin=(email,password)=>async dispatch=>{\n    const config={\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n    const body=JSON.stringify({email,password}); \n\n    try {\n        const res= await axios.post('/users/signin',body,config)\n        dispatch({\n            type:LOGIN_SUCCESS,\n            payload:res.data\n        });\n        // dispatch(loadUser());\n    } catch (error) {\n        // const errors=error.response.data.errors;\n        // if(errors)\n        // {\n        //     errors.forEach(err=>dispatch(setAlert(err.msg,'danger')));\n        // }\n        dispatch({\n            type:LOGIN_FAIL\n        });   \n    }\n}\n"]},"metadata":{},"sourceType":"module"}